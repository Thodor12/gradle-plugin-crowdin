/*
 * Zed Attack Proxy (ZAP) and its related class files.
 *
 * ZAP is an HTTP/HTTPS proxy for assessing web application security.
 *
 * Copyright 2021 The ZAP Development Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.zaproxy.gradle.crowdin.internal.configuration;

import java.util.Objects;
import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;

/** {@link CrowdinProject} specific assertions - Generated by CustomAssertionGenerator. */
public class CrowdinProjectAssert
        extends AbstractObjectAssert<CrowdinProjectAssert, CrowdinProject> {

    /**
     * Creates a new <code>{@link CrowdinProjectAssert}</code> to make assertions on actual
     * CrowdinProject.
     *
     * @param actual the CrowdinProject we want to make assertions on.
     */
    public CrowdinProjectAssert(CrowdinProject actual) {
        super(actual, CrowdinProjectAssert.class);
    }

    /**
     * An entry point for CrowdinProjectAssert to follow AssertJ standard <code>assertThat()</code>
     * statements.<br>
     * With a static import, one can write directly: <code>assertThat(myCrowdinProject)</code> and
     * get specific assertion with code completion.
     *
     * @param actual the CrowdinProject we want to make assertions on.
     * @return a new <code>{@link CrowdinProjectAssert}</code>
     */
    @org.assertj.core.util.CheckReturnValue
    public static CrowdinProjectAssert assertThat(CrowdinProject actual) {
        return new CrowdinProjectAssert(actual);
    }

    /**
     * Verifies that the actual CrowdinProject's id is equal to the given one.
     *
     * @param id the given id to compare the actual CrowdinProject's id to.
     * @return this assertion object.
     * @throws AssertionError - if the actual CrowdinProject's id is not equal to the given one.
     */
    public CrowdinProjectAssert hasId(Long id) {
        // check that actual CrowdinProject we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Long actualId = actual.getId();
        if (!Objects.deepEquals(actualId, id)) {
            failWithMessage(assertjErrorMessage, actual, id, actualId);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual CrowdinProject's sources contains the given Source elements.
     *
     * @param sources the given elements that should be contained in actual CrowdinProject's
     *     sources.
     * @return this assertion object.
     * @throws AssertionError if the actual CrowdinProject's sources does not contain all given
     *     Source elements.
     */
    public CrowdinProjectAssert hasSources(Source... sources) {
        // check that actual CrowdinProject we want to make assertions on is not null.
        isNotNull();

        // check that given Source varargs is not null.
        if (sources == null) failWithMessage("Expecting sources parameter not to be null.");

        // check with standard error message, to set another message call:
        // info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getSources(), sources);

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual CrowdinProject's sources contains the given Source elements in
     * Collection.
     *
     * @param sources the given elements that should be contained in actual CrowdinProject's
     *     sources.
     * @return this assertion object.
     * @throws AssertionError if the actual CrowdinProject's sources does not contain all given
     *     Source elements.
     */
    public CrowdinProjectAssert hasSources(java.util.Collection<? extends Source> sources) {
        // check that actual CrowdinProject we want to make assertions on is not null.
        isNotNull();

        // check that given Source collection is not null.
        if (sources == null) {
            failWithMessage("Expecting sources parameter not to be null.");
            return this; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call:
        // info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getSources(), sources.toArray());

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual CrowdinProject's sources contains <b>only</b> the given Source
     * elements and nothing else in whatever order.
     *
     * @param sources the given elements that should be contained in actual CrowdinProject's
     *     sources.
     * @return this assertion object.
     * @throws AssertionError if the actual CrowdinProject's sources does not contain all given
     *     Source elements.
     */
    public CrowdinProjectAssert hasOnlySources(Source... sources) {
        // check that actual CrowdinProject we want to make assertions on is not null.
        isNotNull();

        // check that given Source varargs is not null.
        if (sources == null) failWithMessage("Expecting sources parameter not to be null.");

        // check with standard error message, to set another message call:
        // info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getSources(), sources);

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual CrowdinProject's sources contains <b>only</b> the given Source
     * elements in Collection and nothing else in whatever order.
     *
     * @param sources the given elements that should be contained in actual CrowdinProject's
     *     sources.
     * @return this assertion object.
     * @throws AssertionError if the actual CrowdinProject's sources does not contain all given
     *     Source elements.
     */
    public CrowdinProjectAssert hasOnlySources(java.util.Collection<? extends Source> sources) {
        // check that actual CrowdinProject we want to make assertions on is not null.
        isNotNull();

        // check that given Source collection is not null.
        if (sources == null) {
            failWithMessage("Expecting sources parameter not to be null.");
            return this; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call:
        // info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getSources(), sources.toArray());

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual CrowdinProject's sources does not contain the given Source elements.
     *
     * @param sources the given elements that should not be in actual CrowdinProject's sources.
     * @return this assertion object.
     * @throws AssertionError if the actual CrowdinProject's sources contains any given Source
     *     elements.
     */
    public CrowdinProjectAssert doesNotHaveSources(Source... sources) {
        // check that actual CrowdinProject we want to make assertions on is not null.
        isNotNull();

        // check that given Source varargs is not null.
        if (sources == null) failWithMessage("Expecting sources parameter not to be null.");

        // check with standard error message (use overridingErrorMessage before contains to set your
        // own message).
        Iterables.instance().assertDoesNotContain(info, actual.getSources(), sources);

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual CrowdinProject's sources does not contain the given Source elements
     * in Collection.
     *
     * @param sources the given elements that should not be in actual CrowdinProject's sources.
     * @return this assertion object.
     * @throws AssertionError if the actual CrowdinProject's sources contains any given Source
     *     elements.
     */
    public CrowdinProjectAssert doesNotHaveSources(java.util.Collection<? extends Source> sources) {
        // check that actual CrowdinProject we want to make assertions on is not null.
        isNotNull();

        // check that given Source collection is not null.
        if (sources == null) {
            failWithMessage("Expecting sources parameter not to be null.");
            return this; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your
        // own message).
        Iterables.instance().assertDoesNotContain(info, actual.getSources(), sources.toArray());

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual CrowdinProject has no sources.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual CrowdinProject's sources is not empty.
     */
    public CrowdinProjectAssert hasNoSources() {
        // check that actual CrowdinProject we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have sources but had :\n  <%s>";

        // check
        if (actual.getSources().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getSources());
        }

        // return the current assertion for method chaining
        return this;
    }
}
