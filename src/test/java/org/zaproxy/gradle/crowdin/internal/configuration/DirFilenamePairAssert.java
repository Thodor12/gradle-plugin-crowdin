/*
 * Zed Attack Proxy (ZAP) and its related class files.
 *
 * ZAP is an HTTP/HTTPS proxy for assessing web application security.
 *
 * Copyright 2021 The ZAP Development Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.zaproxy.gradle.crowdin.internal.configuration;

import java.util.Objects;
import org.assertj.core.api.AbstractObjectAssert;

/** {@link DirFilenamePair} specific assertions - Generated by CustomAssertionGenerator. */
public class DirFilenamePairAssert
        extends AbstractObjectAssert<DirFilenamePairAssert, DirFilenamePair> {

    /**
     * Creates a new <code>{@link DirFilenamePairAssert}</code> to make assertions on actual
     * DirFilenamePair.
     *
     * @param actual the DirFilenamePair we want to make assertions on.
     */
    public DirFilenamePairAssert(DirFilenamePair actual) {
        super(actual, DirFilenamePairAssert.class);
    }

    /**
     * An entry point for DirFilenamePairAssert to follow AssertJ standard <code>assertThat()</code>
     * statements.<br>
     * With a static import, one can write directly: <code>assertThat(myDirFilenamePair)</code> and
     * get specific assertion with code completion.
     *
     * @param actual the DirFilenamePair we want to make assertions on.
     * @return a new <code>{@link DirFilenamePairAssert}</code>
     */
    @org.assertj.core.util.CheckReturnValue
    public static DirFilenamePairAssert assertThat(DirFilenamePair actual) {
        return new DirFilenamePairAssert(actual);
    }

    /**
     * Verifies that the actual DirFilenamePair's dir is equal to the given one.
     *
     * @param dir the given dir to compare the actual DirFilenamePair's dir to.
     * @return this assertion object.
     * @throws AssertionError - if the actual DirFilenamePair's dir is not equal to the given one.
     */
    public DirFilenamePairAssert hasDir(String dir) {
        // check that actual DirFilenamePair we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage =
                "\nExpecting dir of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualDir = actual.getDir();
        if (!Objects.deepEquals(actualDir, dir)) {
            failWithMessage(assertjErrorMessage, actual, dir, actualDir);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual DirFilenamePair's filename is equal to the given one.
     *
     * @param filename the given filename to compare the actual DirFilenamePair's filename to.
     * @return this assertion object.
     * @throws AssertionError - if the actual DirFilenamePair's filename is not equal to the given
     *     one.
     */
    public DirFilenamePairAssert hasFilename(String filename) {
        // check that actual DirFilenamePair we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage =
                "\nExpecting filename of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualFilename = actual.getFilename();
        if (!Objects.deepEquals(actualFilename, filename)) {
            failWithMessage(assertjErrorMessage, actual, filename, actualFilename);
        }

        // return the current assertion for method chaining
        return this;
    }
}
