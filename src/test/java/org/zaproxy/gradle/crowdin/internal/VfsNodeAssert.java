/*
 * Zed Attack Proxy (ZAP) and its related class files.
 *
 * ZAP is an HTTP/HTTPS proxy for assessing web application security.
 *
 * Copyright 2021 The ZAP Development Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.zaproxy.gradle.crowdin.internal;

import java.util.Objects;
import org.assertj.core.api.AbstractComparableAssert;
import org.assertj.core.api.Assertions;

/** {@link VfsNode} specific assertions - Generated by CustomAssertionGenerator. */
public class VfsNodeAssert<T> extends AbstractComparableAssert<VfsNodeAssert<T>, VfsNode<T>> {

    /**
     * Creates a new <code>{@link VfsNodeAssert}</code> to make assertions on actual VfsNode.
     *
     * @param actual the VfsNode we want to make assertions on.
     */
    public VfsNodeAssert(VfsNode<T> actual) {
        super(actual, VfsNodeAssert.class);
    }

    /**
     * An entry point for VfsNodeAssert to follow AssertJ standard <code>assertThat()</code>
     * statements.<br>
     * With a static import, one can write directly: <code>assertThat(myVfsNode)</code> and get
     * specific assertion with code completion.
     *
     * @param actual the VfsNode we want to make assertions on.
     * @return a new <code>{@link VfsNodeAssert}</code>
     */
    @org.assertj.core.util.CheckReturnValue
    public static <T> VfsNodeAssert<T> assertThat(VfsNode<T> actual) {
        return new VfsNodeAssert<>(actual);
    }

    public VfsNodeAssert<T> hasData(T data) {
        isNotNull();
        Assertions.assertThat(actual.getData()).isEqualTo(data);
        return this;
    }

    public VfsNodeAssert<T> hasNoData() {
        isNotNull();
        Assertions.assertThat(actual.getData()).as("Expecting no data to be present.").isNull();
        return this;
    }

    public VfsNodeAssert<T> hasNodes() {
        isNotNull();
        Assertions.assertThat(actual.hasNodes()).as("Expecting node to have nodes.").isTrue();
        return this;
    }

    public VfsNodeAssert<T> hasNoNodes() {
        isNotNull();
        Assertions.assertThat(actual.hasNodes()).as("Expecting node to have no nodes.").isFalse();
        return this;
    }

    /**
     * Verifies that the actual VfsNode's name is equal to the given one.
     *
     * @param name the given name to compare the actual VfsNode's name to.
     * @return this assertion object.
     * @throws AssertionError - if the actual VfsNode's name is not equal to the given one.
     */
    public VfsNodeAssert<T> hasName(String name) {
        // check that actual VfsNode we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage =
                "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualName = actual.getName();
        if (!Objects.deepEquals(actualName, name)) {
            failWithMessage(assertjErrorMessage, actual, name, actualName);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual VfsNode's parent is equal to the given one.
     *
     * @param parent the given parent to compare the actual VfsNode's parent to.
     * @return this assertion object.
     * @throws AssertionError - if the actual VfsNode's parent is not equal to the given one.
     */
    public VfsNodeAssert<T> hasParent(VfsNode<T> parent) {
        // check that actual VfsNode we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage =
                "\nExpecting parent of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        VfsNode<T> actualParent = actual.getParent();
        if (!Objects.deepEquals(actualParent, parent)) {
            failWithMessage(assertjErrorMessage, actual, parent, actualParent);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual VfsNode's path is equal to the given one.
     *
     * @param path the given path to compare the actual VfsNode's path to.
     * @return this assertion object.
     * @throws AssertionError - if the actual VfsNode's path is not equal to the given one.
     */
    public VfsNodeAssert<T> hasPath(String path) {
        // check that actual VfsNode we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage =
                "\nExpecting path of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualPath = actual.getPath();
        if (!Objects.deepEquals(actualPath, path)) {
            failWithMessage(assertjErrorMessage, actual, path, actualPath);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual VfsNode is root.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual VfsNode is not root.
     */
    public VfsNodeAssert<T> isRoot() {
        // check that actual VfsNode we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is true
        if (!actual.isRoot()) {
            failWithMessage("\nExpecting that actual VfsNode is root but is not.");
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual VfsNode is not root.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual VfsNode is root.
     */
    public VfsNodeAssert<T> isNotRoot() {
        // check that actual VfsNode we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is false
        if (actual.isRoot()) {
            failWithMessage("\nExpecting that actual VfsNode is not root but is.");
        }

        // return the current assertion for method chaining
        return this;
    }
}
