/*
 * Zed Attack Proxy (ZAP) and its related class files.
 *
 * ZAP is an HTTP/HTTPS proxy for assessing web application security.
 *
 * Copyright 2021 The ZAP Development Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.zaproxy.gradle.crowdin.internal.configuration;

import java.util.Objects;
import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;

/** {@link FileSet} specific assertions - Generated by CustomAssertionGenerator. */
public class FileSetAssert extends AbstractObjectAssert<FileSetAssert, FileSet> {

    /**
     * Creates a new <code>{@link FileSetAssert}</code> to make assertions on actual FileSet.
     *
     * @param actual the FileSet we want to make assertions on.
     */
    public FileSetAssert(FileSet actual) {
        super(actual, FileSetAssert.class);
    }

    /**
     * An entry point for FileSetAssert to follow AssertJ standard <code>assertThat()</code>
     * statements.<br>
     * With a static import, one can write directly: <code>assertThat(myFileSet)</code> and get
     * specific assertion with code completion.
     *
     * @param actual the FileSet we want to make assertions on.
     * @return a new <code>{@link FileSetAssert}</code>
     */
    @org.assertj.core.util.CheckReturnValue
    public static FileSetAssert assertThat(FileSet actual) {
        return new FileSetAssert(actual);
    }

    /**
     * Verifies that the actual FileSet's crowdinPathFilename is equal to the given one.
     *
     * @param crowdinPathFilename the given crowdinPathFilename to compare the actual FileSet's
     *     crowdinPathFilename to.
     * @return this assertion object.
     * @throws AssertionError - if the actual FileSet's crowdinPathFilename is not equal to the
     *     given one.
     */
    public FileSetAssert hasCrowdinPathFilename(String crowdinPathFilename) {
        // check that actual FileSet we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage =
                "\nExpecting crowdinPathFilename of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualCrowdinPathFilename = actual.getCrowdinPathFilename();
        if (!Objects.deepEquals(actualCrowdinPathFilename, crowdinPathFilename)) {
            failWithMessage(
                    assertjErrorMessage, actual, crowdinPathFilename, actualCrowdinPathFilename);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual FileSet's exportPatternFilename is equal to the given one.
     *
     * @param exportPatternFilename the given exportPatternFilename to compare the actual FileSet's
     *     exportPatternFilename to.
     * @return this assertion object.
     * @throws AssertionError - if the actual FileSet's exportPatternFilename is not equal to the
     *     given one.
     */
    public FileSetAssert hasExportPatternFilename(String exportPatternFilename) {
        // check that actual FileSet we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage =
                "\nExpecting exportPatternFilename of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualExportPatternFilename = actual.getExportPatternFilename();
        if (!Objects.deepEquals(actualExportPatternFilename, exportPatternFilename)) {
            failWithMessage(
                    assertjErrorMessage,
                    actual,
                    exportPatternFilename,
                    actualExportPatternFilename);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual FileSet's pattern is equal to the given one.
     *
     * @param pattern the given pattern to compare the actual FileSet's pattern to.
     * @return this assertion object.
     * @throws AssertionError - if the actual FileSet's pattern is not equal to the given one.
     */
    public FileSetAssert hasPattern(String pattern) {
        // check that actual FileSet we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage =
                "\nExpecting pattern of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualPattern = actual.getPattern();
        if (!Objects.deepEquals(actualPattern, pattern)) {
            failWithMessage(assertjErrorMessage, actual, pattern, actualPattern);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual FileSet's translatableElements contains the given String elements.
     *
     * @param translatableElements the given elements that should be contained in actual FileSet's
     *     translatableElements.
     * @return this assertion object.
     * @throws AssertionError if the actual FileSet's translatableElements does not contain all
     *     given String elements.
     */
    public FileSetAssert hasTranslatableElements(String... translatableElements) {
        // check that actual FileSet we want to make assertions on is not null.
        isNotNull();

        // check that given String varargs is not null.
        if (translatableElements == null)
            failWithMessage("Expecting translatableElements parameter not to be null.");

        // check with standard error message, to set another message call:
        // info.overridingErrorMessage("my error message");
        Iterables.instance()
                .assertContains(info, actual.getTranslatableElements(), translatableElements);

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual FileSet's translatableElements contains the given String elements in
     * Collection.
     *
     * @param translatableElements the given elements that should be contained in actual FileSet's
     *     translatableElements.
     * @return this assertion object.
     * @throws AssertionError if the actual FileSet's translatableElements does not contain all
     *     given String elements.
     */
    public FileSetAssert hasTranslatableElements(
            java.util.Collection<? extends String> translatableElements) {
        // check that actual FileSet we want to make assertions on is not null.
        isNotNull();

        // check that given String collection is not null.
        if (translatableElements == null) {
            failWithMessage("Expecting translatableElements parameter not to be null.");
            return this; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call:
        // info.overridingErrorMessage("my error message");
        Iterables.instance()
                .assertContains(
                        info, actual.getTranslatableElements(), translatableElements.toArray());

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual FileSet's translatableElements contains <b>only</b> the given String
     * elements and nothing else in whatever order.
     *
     * @param translatableElements the given elements that should be contained in actual FileSet's
     *     translatableElements.
     * @return this assertion object.
     * @throws AssertionError if the actual FileSet's translatableElements does not contain all
     *     given String elements.
     */
    public FileSetAssert hasOnlyTranslatableElements(String... translatableElements) {
        // check that actual FileSet we want to make assertions on is not null.
        isNotNull();

        // check that given String varargs is not null.
        if (translatableElements == null)
            failWithMessage("Expecting translatableElements parameter not to be null.");

        // check with standard error message, to set another message call:
        // info.overridingErrorMessage("my error message");
        Iterables.instance()
                .assertContainsOnly(info, actual.getTranslatableElements(), translatableElements);

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual FileSet's translatableElements contains <b>only</b> the given String
     * elements in Collection and nothing else in whatever order.
     *
     * @param translatableElements the given elements that should be contained in actual FileSet's
     *     translatableElements.
     * @return this assertion object.
     * @throws AssertionError if the actual FileSet's translatableElements does not contain all
     *     given String elements.
     */
    public FileSetAssert hasOnlyTranslatableElements(
            java.util.Collection<? extends String> translatableElements) {
        // check that actual FileSet we want to make assertions on is not null.
        isNotNull();

        // check that given String collection is not null.
        if (translatableElements == null) {
            failWithMessage("Expecting translatableElements parameter not to be null.");
            return this; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call:
        // info.overridingErrorMessage("my error message");
        Iterables.instance()
                .assertContainsOnly(
                        info, actual.getTranslatableElements(), translatableElements.toArray());

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual FileSet's translatableElements does not contain the given String
     * elements.
     *
     * @param translatableElements the given elements that should not be in actual FileSet's
     *     translatableElements.
     * @return this assertion object.
     * @throws AssertionError if the actual FileSet's translatableElements contains any given String
     *     elements.
     */
    public FileSetAssert doesNotHaveTranslatableElements(String... translatableElements) {
        // check that actual FileSet we want to make assertions on is not null.
        isNotNull();

        // check that given String varargs is not null.
        if (translatableElements == null)
            failWithMessage("Expecting translatableElements parameter not to be null.");

        // check with standard error message (use overridingErrorMessage before contains to set your
        // own message).
        Iterables.instance()
                .assertDoesNotContain(info, actual.getTranslatableElements(), translatableElements);

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual FileSet's translatableElements does not contain the given String
     * elements in Collection.
     *
     * @param translatableElements the given elements that should not be in actual FileSet's
     *     translatableElements.
     * @return this assertion object.
     * @throws AssertionError if the actual FileSet's translatableElements contains any given String
     *     elements.
     */
    public FileSetAssert doesNotHaveTranslatableElements(
            java.util.Collection<? extends String> translatableElements) {
        // check that actual FileSet we want to make assertions on is not null.
        isNotNull();

        // check that given String collection is not null.
        if (translatableElements == null) {
            failWithMessage("Expecting translatableElements parameter not to be null.");
            return this; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your
        // own message).
        Iterables.instance()
                .assertDoesNotContain(
                        info, actual.getTranslatableElements(), translatableElements.toArray());

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual FileSet has no translatableElements.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual FileSet's translatableElements is not empty.
     */
    public FileSetAssert hasNoTranslatableElements() {
        // check that actual FileSet we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage =
                "\nExpecting :\n  <%s>\nnot to have translatableElements but had :\n  <%s>";

        // check
        if (actual.getTranslatableElements().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getTranslatableElements());
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual FileSet's type is equal to the given one.
     *
     * @param type the given type to compare the actual FileSet's type to.
     * @return this assertion object.
     * @throws AssertionError - if the actual FileSet's type is not equal to the given one.
     */
    public FileSetAssert hasType(String type) {
        // check that actual FileSet we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage =
                "\nExpecting type of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualType = actual.getType();
        if (!Objects.deepEquals(actualType, type)) {
            failWithMessage(assertjErrorMessage, actual, type, actualType);
        }

        // return the current assertion for method chaining
        return this;
    }
}
